https://zenodo.org/record/2529926/files/limma-voom_normalised_counts
library(matrixStats)
install.packages("ztable")
library(ztable)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("cardiomoon/ztable")
library(magrittr)
options(ztable.type="html")
library(pheatmap)
design_tab <- read.table("CONTROL_table_Subsystems.out_level_1", header = T, sep = "\t", stringsAsFactors = F)
data <- as.matrix("CONTROL_table_Subsystems.out_level_1")
heatmap(data)
CONTROL_table_Subsystems.out_level_1
heatmap(data, scale="column")
data <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
heatmap(data)
library(stringr)
library("DESeq2")
library(vegan)
library(data.table)
x  <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
data <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
x  <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
x  <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
x  <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = ("controlB01-2","controlB03-4","controlB05-6"), ylab =  "METABOLITES",
main = "heatmap( ..., scale = \"column\")")
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = ("controlB01-2","controlB03-4","controlB05-6"), ylab =  "METABOLITES",
main = "heatmap( ..., scale = \"column\")"
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = ("controlB01-2","controlB03-4","controlB05-6"), ylab =  "METABOLITES")
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10))
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10), xlab = NULL, ylab = NULL)
mine.data <- read.table(file = "CONTROL_table_Subsystems.out_level_1.txt")
mine.data <- read.table(file = "CONTROL_table_Subsystems.out_level_1.txt")
library("tidyr")
library("ggplot2")
data <- read.table(file = "CONTROL_table_Subsystems.out_level_1.txt")
data <- read.table(file = "CONTROL_table_Subsystems.out_level_1.txt")
x  <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
mydesign <- data.frame(sample_data("CONTROL_table_Subsystems.out_level_1.txt"))
mydesign <- data.frame(sample_data(read.table("CONTROL_table_Subsystems.out_level_1.txt")))
mydesign <- data.frame(read.table("CONTROL_table_Subsystems.out_level_1.txt"))
mydesign <- read.table("CONTROL_table_Subsystems.out_level_1.txt")
data <- as.matrix("CONTROL_table_Subsystems.out_level_1.txt")
heatmap(data)
data <- as.matrix("CONTROL_table_Subsystems.out_level_1_RA.txt")
heatmap(data, scale="column")
heatmap(data, Colv = NA, Rowv = NA, scale="column")
data <- as.matrix(read.table("CONTROL_table_Subsystems.out_level_1_RA.txt"))
data <- (read.table("CONTROL_table_Subsystems.out_level_1_RA.txt"))
data <- read.table("CONTROL_table_Subsystems.out_level_1_RA.txt")
data <- read.table("CONTROL_table_Subsystems.out_level_1_RA.txt",sep=",")
control_matrix <- data.matrix("CONTROL_table_Subsystems.out_level_1_RA.txt")
row.names(control_matrix) <- control_matrix$METABOLITES
row.names(control_matrix) <- $METABOLITES
row.names(control_matrix) <- control_matrix$"METABOLITES"
CONTROL <- read.csv("CONTROL_table_Subsystems.out_level_1_RA.txt", sep=",")
CONTROL <- read.csv("CONTROL_table_Subsystems.out_level_1_RA.txt")
CONTROL <- read.csv("CONTROL_table_Subsystems.out_level_1_RA.txt")
CONTROL <- read.csv("CONTROL_table_Subsystems.out_level_1_RA.txt")
CONTROL <- read.table("CONTROL_table_Subsystems.out_level_1_RA.txt")
CONTROL <- read.table("CONTROL_table_Subsystems.out_level_1_RA.txt")
trialControl <- read.table("CONTROL_table_Subsystems.out_level_1_RA.txt")
CONTROLtrial <- read.table("CONTROL_table_Subsystems.out_level_1.txt")
CONTROLtrial <- read.table("T_CONTROL_table_Subsystems.out_level_1.txt")
CONTROLtrial <-load.table("T_CONTROL_table_Subsystems.out_level_1.txt")
x <-read.txt("T_CONTROL_table_Subsystems.out_level_1.txt")
library(ggplot2)
x <-read.table("T_CONTROL_table_Subsystems.out_level_1.txt")
install.packages(gplots)
install.packages("gplots")
library(gplots)
x <-read.table("T_CONTROL_table_Subsystems.out_level_1.txt")
x <-read.table("CONTROL_table_Subsystems.out_level_1_RA.txt")
install.packages("vegan")
library(vegan)
pc <- read.table("CONTROL_table_Subsystems.out_level_1_RA.txt", header= TRUE)
pc <- read.table("CONTROL_table_Subsystems.out_level_1_RA", header= TRUE)
x <-read.table("CONTROL_table_Subsystems.out_level_1")
x <-read.table("CONTROL_table_Subsystems.out_level_1",header = T, sep = "\t", stringsAsFactors = F))
library(stringr)
library(stats)
library(graphics)
library(grDevices)
library(utils)
library(datasets)
library(methods)
library(base)
pwd
p(wd)
design_tab <- read.table("input_files/design", header = T, sep = "\t", stringsAsFactors = F)
design_tab <- read.table("CONTROL_table_Subsystems.out_level_1", header = T, sep = "\t", stringsAsFactors = F)
x<- read.table("CONTROL_table_Subsystems.out_level_1.txt", header=T, sep="/t", row.names=1)
x <- read.table("CONTROL.txt", header=T, sep="/t", row.names=1)
library(pheatmap)
library(phyloseq)
x <- read.table("CONTROL.txt", header=T,sep = "\t",row.names = 1)
View(x)
CONTROL_RA <- read.table("CONTROL_metabol_RA.txt", header=T,sep = "\t",row.names = 1)
View(CONTROL_RA)
MyTable <- as.data.frame(table(CONTROL_RA$METABOLITES,CONTROL_RA$controlB01.2))
C <- data.matrix(CONTROL_RA)
C
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12))
source("~/METATTRANSCRIPTOME trial heatmap.R")
source("~/METATTRANSCRIPTOME trial heatmap.R")
?heatmap.2?
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.7)
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(8,8), cexRow = 0.7)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.5)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.5)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8, sepwidth=c(0.05,0.05)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8, sepwidth=c(0.05,0.05))
library("gplots")
library("RColorBrewer")
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8, scale="row")
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8, scale="row")
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 0.8, scale="row")
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row")
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row")
dev.off()
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(10,12), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(10,15), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(10,10), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(10,18), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(8,18), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(8,25), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification_Metabolome", trace= "none", margins= c(8,22), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous_Vinification", trace= "none", margins= c(8,22), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
heatmap.2 (C, main="Autochthonous", trace= "none", margins= c(8,22), cexRow = 1.0, cexCol = 1.0, scale="row", Rowv = FALSE, Colv = FALSE, key = FALSE)
dev.off()
source("~/METATTRANSCRIPTOME trial heatmap.R")
source("~/METATTRANSCRIPTOME trial heatmap.R")
source("~/METATTRANSCRIPTOME trial heatmap.R")
library(ggplot2)
library(ggraph)
library(graph)
library(gridExtra)
library(gtable)
library(gtools)
library(pheatmap)
library(phyloseq)
TRIAL <- readRDS("~/TRIAL.RDS")
TRIAL
psdt <- TRIAL
psdt_ra <- transform_sample_counts(psdt, function(x) x / sum(x))
mynumOTUs <- 200
ps_htmp <- prune_taxa(names(taxa_sums(psdt_ra)[order(taxa_sums(psdt_ra), decreasing = T)][1:mynumOTUs]),psdt_ra)
mydesign <- data.frame(sample_data(ps_htmp))
dtcounts <- decostand(data.frame(otu_table(ps_htmp))[row.names(mydesign),], method = "range", MARGIN = 2)
library(Biobase)
library(BiocManager)
library(BiocVersion)
library(Biostrings)
library(clusterProfiler)
library(dada2)
library(data.table)
library(devtools)
library(dplyr)
library(digest)
library(generics)
library(lifecycle)
library(magrittr)
dtcounts <- decostand(data.frame(otu_table(ps_htmp))[row.names(mydesign),], method = "range", MARGIN = 2)
library(agricolae)
library(ape)
library(fastmap)
library(gdtools)
library(ggrepel)
library(metagenomeSeq)
library(PERMANOVA)
library(vegan)
dtcounts <- decostand(data.frame(otu_table(ps_htmp))[row.names(mydesign),], method = "range", MARGIN = 2)
myotus <- colnames(dtcounts)
mystatsout <- list()
for(myotu in myotus){
if(sum(dtcounts[,myotu]) == 0){
mystatsout[[myotu]]$krusk$statistics$p.chisq <- 1
} else {
mykrusk <- kruskal(dtcounts[,myotu], mydesign[rownames(dtcounts),]$terroir, group = T)
mystatsout[[myotu]][["krusk"]] <- mykrusk
}
}
for(myotu in myotus){
if(sum(dtcounts[,myotu]) == 0){
mystatsout[[myotu]]$krusk$statistics$p.chisq <- 1
} else {
mykrusk <- kruskal(dtcounts[,myotu], mydesign[rownames(dtcounts),]$VINIFICATION_TYPE, group = T)
mystatsout[[myotu]][["krusk"]] <- mykrusk
}
}
sample_data(TRIAL)
for(myotu in myotus){
if(sum(dtcounts[,myotu]) == 0){
mystatsout[[myotu]]$krusk$statistics$p.chisq <- 1
} else {
mykrusk <- kruskal(dtcounts[,myotu], mydesign[rownames(dtcounts),]$VINIFICATION.TYPE, group = T)
mystatsout[[myotu]][["krusk"]] <- mykrusk
}
}
mystatsoutkruskpvals <- unlist(lapply(myotus, function(x) mystatsout[[x]]$krusk$statistics$p.chisq))
names(mystatsoutkruskpvals) <- myotus
mystatsoutkruskpvals.adj <- p.adjust(mystatsoutkruskpvals, method = "fdr")
for (i in c(1:length(mystatsoutkruskpvals.adj))) {
if (mystatsoutkruskpvals.adj[i] < 0.05) {
print(names(mystatsoutkruskpvals.adj[i]))
}
}
for (i in c(1:length(mystatsoutkruskpvals))) {
if (mystatsoutkruskpvals[i] < 0.05) {
print(names(mystatsoutkruskpvals[i]))
}
}
mytax <- data.frame(tax_table(ps_htmp), stringsAsFactors = F)
mytax <- data.frame(otu_table(ps_htmp), stringsAsFactors = F)
mytxplot <- data.frame(OTU = row.names(mytax),
txplt = paste(row.names(mytax), " ", mytax$Phylum,  ":", mytax$Genus,  sep = ""))
mystarspheat <- array()
for(myotu_sig in mytxplot$OTU){
mystarspheat[myotu_sig] <- stars.pval(get(paste("mystatsoutkruskpvals", sep = ""))[myotu_sig])
}
mystarspheat1 <- mystarspheat[complete.cases(mystarspheat)]
mystarspheat1_tbl <- data.frame(star=mystarspheat1, row.names = names(mystarspheat1))
dtcounts <- t(dtcounts)
counts_nms <- merge(mytxplot,dtcounts, by.x = "OTU", by.y = "row.names", all = T)
counts_nms_stars <- merge(mystarspheat1_tbl,counts_nms, by.x = "row.names",by.y = "OTU", all = T)
counts_nms_stars$nms_star <- paste(counts_nms_stars$txplt,counts_nms_stars$star)
mytxplot <- data.frame(OTU = colnames(mytax),
txplt = paste(row.names(mytax), " ", mytax$Phylum,  ":", mytax$Genus,  sep = ""))
mytxplot <- data.frame(OTU = colnames(mytax),
txplt = paste(row.names(mytax), sep = ""))
mytxplot <- data.frame(OTU = colnames(mytax),
txplt = paste(colnames(mytax), sep = ""))
mystarspheat <- array()
for(myotu_sig in mytxplot$OTU){
mystarspheat[myotu_sig] <- stars.pval(get(paste("mystatsoutkruskpvals", sep = ""))[myotu_sig])
}
mystarspheat1 <- mystarspheat[complete.cases(mystarspheat)]
mystarspheat1_tbl <- data.frame(star=mystarspheat1, row.names = names(mystarspheat1))
dtcounts <- t(dtcounts)
counts_nms <- merge(mytxplot,dtcounts, by.x = "OTU", by.y = "colnames", all = T)
counts_nms <- merge(mytxplot,dtcounts, by.x = "OTU", by.y = "row.names", all = T)
counts_nms_stars <- merge(mystarspheat1_tbl,counts_nms, by.x = "row.names",by.y = "OTU", all = T)
counts_nms_stars$nms_star <- paste(counts_nms_stars$txplt,counts_nms_stars$star)
counts_fin <- counts_nms_stars[,4:(ncol(counts_nms_stars)-1)]
row.names(counts_fin) <- counts_nms_stars$nms_star
colnames(counts_fin) <- counts_nms_stars$nms_star
mystarspheat1_tbl <- data.frame(star=mystarspheat1, row.names = names(mystarspheat1))
counts_nms_stars$nms_star <- paste(counts_nms_stars$txplt,counts_nms_stars$star)
counts_fin <- counts_nms_stars[,4:(ncol(counts_nms_stars)-1)]
row.names(counts_fin) <- counts_nms_stars$nms_star
counts_fin <- counts_nms_stars[,4:(ncol(counts_nms_stars)-1)]
myrelabund <- data.frame("mean RA %" = 100*rowMeans(counts_fin), check.names = F)
counts_fin_relabund <- merge(counts_fin,myrelabund, by = "row.names", all.x = T)
counts_fin_relabund1 <- counts_fin_relabund[,-c(1,ncol(counts_fin_relabund))]
rownames(counts_fin_relabund1) <- counts_fin_relabund$Row.names
mat_fr_plot <- counts_fin_relabund1[grep("\\*",row.names(counts_fin_relabund1)),]
htmp_mat <- decostand(mat_fr_plot, "range", MARGIN = 1)
colnames(mat_fr_plot) <- mydesign$sum_code_year
htmp_mat <- mat_fr_plot
htmp_plot <- function(htmp_mat, mycolors, mycuttreecols, mycuttreerows, mean_RA) {
pheatmap(htmp_mat, color = mycolors, cluster_rows = T,
fontsize = 15,
cutree_cols = mycuttreecols, cutree_rows = mycuttreerows,
annotation_row = mean_RA,
border_color = "grey30",
cellwidth = 15, cellheight = 15)
}
mycolors <- colorRampPalette(c("grey95","lightsteelblue4","darkred","darkorange2"))(n = 119)
mycutree_col <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycutree_col <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreecols <- max(mycutree_col)
mycutree_row <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
Fungi1920_vine_RIS3_FL <- readRDS("~/Fungi1920_vine_RIS3_FL.RDS")
psdt <- TRIAL
psdt_ra <- transform_sample_counts(psdt, function(x) x / sum(x))
ps_htmp <- prune_taxa(names(taxa_sums(psdt_ra)[order(taxa_sums(psdt_ra), decreasing = T)]),psdt_ra)
mydesign <- data.frame(sample_data(ps_htmp))
dtcounts <- decostand(data.frame(otu_table(ps_htmp))[row.names(mydesign),], method = "range", MARGIN = 2)
myotus <- colnames(dtcounts)
mystatsout <- list()
for(myotu in myotus){
if(sum(dtcounts[,myotu]) == 0){
mystatsout[[myotu]]$krusk$statistics$p.chisq <- 1
} else {
mykrusk <- kruskal(dtcounts[,myotu], mydesign[rownames(dtcounts),]$VINIFICATION.TYPE, group = T)
mystatsout[[myotu]][["krusk"]] <- mykrusk
}
}
mystatsoutkruskpvals <- unlist(lapply(myotus, function(x) mystatsout[[x]]$krusk$statistics$p.chisq))
names(mystatsoutkruskpvals) <- myotus
mystatsoutkruskpvals.adj <- p.adjust(mystatsoutkruskpvals, method = "fdr")
for (i in c(1:length(mystatsoutkruskpvals.adj))) {
if (mystatsoutkruskpvals.adj[i] < 0.05) {
print(names(mystatsoutkruskpvals.adj[i]))
}
}
for (i in c(1:length(mystatsoutkruskpvals))) {
if (mystatsoutkruskpvals[i] < 0.05) {
print(names(mystatsoutkruskpvals[i]))
}
}
mytax <- data.frame(otu_table(ps_htmp), stringsAsFactors = F)
mystarspheat <- array()
for(myotu_sig in mytxplot$OTU){
mystarspheat[myotu_sig] <- stars.pval(get(paste("mystatsoutkruskpvals", sep = ""))[myotu_sig])
}
mystarspheat1 <- mystarspheat[complete.cases(mystarspheat)]
mystarspheat1_tbl <- data.frame(star=mystarspheat1, row.names = names(mystarspheat1))
dtcounts <- t(dtcounts)
counts_nms <- merge(mytxplot,dtcounts, by.x = "OTU", by.y = "row.names", all = T)
counts_nms_stars <- merge(mystarspheat1_tbl,counts_nms, by.x = "row.names",by.y = "OTU", all = T)
counts_nms_stars$nms_star <- paste(counts_nms_stars$txplt,counts_nms_stars$star)
counts_fin <- counts_nms_stars[,4:(ncol(counts_nms_stars)-1)]
row.names(counts_fin) <- counts_nms_stars$nms_star
myrelabund <- data.frame("mean RA %" = 100*rowMeans(counts_fin), check.names = F)
counts_fin_relabund <- merge(counts_fin,myrelabund, by = "row.names", all.x = T)
counts_fin_relabund1 <- counts_fin_relabund[,-c(1,ncol(counts_fin_relabund))]
rownames(counts_fin_relabund1) <- counts_fin_relabund$Row.names
mat_fr_plot <- counts_fin_relabund1[grep("\\*",row.names(counts_fin_relabund1)),]
htmp_mat <- decostand(mat_fr_plot, "range", MARGIN = 1)
colnames(mat_fr_plot) <- mydesign$VINIFICATION.TYPE
htmp_mat <- mat_fr_plot
htmp_plot <- function(htmp_mat, mycolors, mycuttreecols, mycuttreerows, mean_RA) {
pheatmap(htmp_mat, color = mycolors, cluster_rows = T,
fontsize = 15,
cutree_cols = mycuttreecols, cutree_rows = mycuttreerows,
annotation_row = mean_RA,
border_color = "grey30",
cellwidth = 15, cellheight = 15)
}
mycolors <- colorRampPalette(c("grey95","lightsteelblue4","darkred","darkorange2"))(n = 119)
mycutree_col <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreecols <- max(mycutree_col)
mycutree_row <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreerows<- max(mycutree_row)
mean_RA <- myrelabund
cairo_pdf(paste("HEATMAP_METABOLOME_VINIFICATIONS.pdf", sep = ""), width = 35, height = 15)
htmp_plot(htmp_mat = htmp_mat,
mycolors = mycolors,
mycuttreecols = mycuttreecols,
mycuttreerows = mycuttreerows,
mean_RA = mean_RA)
dev.off()
counts_fin_t <- t(counts_fin)
counts_fin_agg <- aggregate(counts_fin_t, by = list(mydesign$VINIFICATION.TYPE), mean)
rownames(counts_fin_agg) <- counts_fin_agg$Group.1
counts_fin_agg_t <- t(counts_fin_agg[,-grep("Group.1",colnames(counts_fin_agg))])
counts_fin_agg_relabund <- merge(counts_fin_agg_t,myrelabund, by = "row.names", all.x = T)
counts_fin_agg_relabund1 <- counts_fin_agg_relabund[,grep(paste(levels(mydesign$terroir_vinification),collapse = "|"),colnames(counts_fin_agg_relabund))]
counts_fin_agg_relabund1 <- counts_fin_agg_relabund[,-c(1,ncol(counts_fin_agg_relabund))]
row.names(counts_fin_agg_relabund1) <- paste(counts_fin_agg_relabund$Row.names)
mat_fr_plot_agg <- counts_fin_agg_relabund1[grep("\\*",row.names(counts_fin_agg_relabund1)),]
write.table(mat_fr_plot_agg, file = "mat_fr_plot_agg.txt")
htmp_mat <- mat_fr_plot_agg
htmp_mat <- decostand(mat_fr_plot_agg, "range", MARGIN = 1)
htmp_plot <- function(htmp_mat, mycolors, mycuttreecols, mycuttreerows, mean_RA) {
pheatmap(htmp_mat, color = mycolors, cluster_rows = T,
fontsize = 15,
cutree_cols = mycuttreecols, cutree_rows = mycuttreerows,
annotation_row = mean_RA,
border_color = "grey30",
cellwidth = 15, cellheight = 15)
}
mycolors <- colorRampPalette(c("grey95","lightsteelblue4","darkred","darkorange2"))(n = 119)
mycutree_col <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreecols <- max(mycutree_col)
mycutree_row <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreerows<- max(mycutree_row)
mean_RA <- myrelabund
cairo_pdf(paste("HEATMAP_METABOLOME_VINIFICATIONS_Aggr.pdf", sep = ""), width = 35, height =15)
htmp_plot(htmp_mat = htmp_mat,
mycolors = mycolors,
mycuttreecols = mycuttreecols,
mycuttreerows = mycuttreerows,
mean_RA = mean_RA)
dev.off()
TRIAL <- readRDS("~/TRIAL.RDS")
library(htmltools)
library(DESeq2)
psdt <- TRIAL
METABOLOME2VIN <- read.table (file = "METABOLITES_2VINIF.txt", header = TRUE, row.names = 1, sep = "\t")
METABOLOME_2VINIF <- t(METABOLOME2VIN)
View(METABOLOME_2VINIF)
samdf <- read.table (file = "2VINIFICATIONS_DATA_TABLE.txt", header = TRUE, row.names = 1, sep = "\t")
View(samdf)
TRIAL <- phyloseq(otu_table(METABOLOME_2VINIF,
taxa_are_rows=FALSE),
sample_data(samdf))
saveRDS(TRIAL, file = "TRIAL.RDS")
psdt <- TRIAL
psdt_ra <- transform_sample_counts(psdt, function(x) x / sum(x))
ps_htmp <- prune_taxa(names(taxa_sums(psdt_ra)[order(taxa_sums(psdt_ra))]),psdt_ra)
mydesign <- data.frame(sample_data(ps_htmp))
dtcounts <- decostand(data.frame(otu_table(ps_htmp))[row.names(mydesign),], method = "range", MARGIN = 2)
myotus <- colnames(dtcounts)
mystatsout <- list()
for(myotu in myotus){
if(sum(dtcounts[,myotu]) == 0){
mystatsout[[myotu]]$krusk$statistics$p.chisq <- 1
} else {
mykrusk <- kruskal(dtcounts[,myotu], mydesign[rownames(dtcounts),]$VINIFICATION.TYPE, group = T)
mystatsout[[myotu]][["krusk"]] <- mykrusk
}
}
mystatsoutkruskpvals <- unlist(lapply(myotus, function(x) mystatsout[[x]]$krusk$statistics$p.chisq))
names(mystatsoutkruskpvals) <- myotus
mystatsoutkruskpvals.adj <- p.adjust(mystatsoutkruskpvals, method = "fdr")
for (i in c(1:length(mystatsoutkruskpvals.adj))) {
if (mystatsoutkruskpvals.adj[i] < 0.05) {
print(names(mystatsoutkruskpvals.adj[i]))
}
}
for (i in c(1:length(mystatsoutkruskpvals))) {
if (mystatsoutkruskpvals[i] < 0.05) {
print(names(mystatsoutkruskpvals[i]))
}
}
mytax <- data.frame(otu_table(ps_htmp), stringsAsFactors = F)
mytxplot <- data.frame(OTU = colnames(mytax),
txplt = paste(colnames(mytax), sep = ""))
##Prepare stars, select among (mystatsoutkruskpvals,mystatsoutkruskpvals
mystarspheat <- array()
for(myotu_sig in mytxplot$OTU){
mystarspheat[myotu_sig] <- stars.pval(get(paste("mystatsoutkruskpvals", sep = ""))[myotu_sig])
}
mystarspheat1 <- mystarspheat[complete.cases(mystarspheat)]
mystarspheat1_tbl <- data.frame(star=mystarspheat1, row.names = names(mystarspheat1))
dtcounts <- t(dtcounts)
counts_nms <- merge(mytxplot,dtcounts, by.x = "OTU", by.y = "row.names", all = T)
counts_nms_stars <- merge(mystarspheat1_tbl,counts_nms, by.x = "row.names",by.y = "OTU", all = T)
counts_nms_stars$nms_star <- paste(counts_nms_stars$txplt,counts_nms_stars$star)
counts_fin <- counts_nms_stars[,4:(ncol(counts_nms_stars)-1)]
row.names(counts_fin) <- counts_nms_stars$nms_star
myrelabund <- data.frame("mean RA %" = 100*rowMeans(counts_fin), check.names = F)
counts_fin_relabund <- merge(counts_fin,myrelabund, by = "row.names", all.x = T)
counts_fin_relabund1 <- counts_fin_relabund[,-c(1,ncol(counts_fin_relabund))]
rownames(counts_fin_relabund1) <- counts_fin_relabund$Row.names
mat_fr_plot <- counts_fin_relabund1[grep("\\*",row.names(counts_fin_relabund1)),]
htmp_mat <- decostand(mat_fr_plot, "range", MARGIN = 1)
colnames(mat_fr_plot) <- mydesign$VINIFICATION.STAGE
htmp_mat <- mat_fr_plot
htmp_plot <- function(htmp_mat, mycolors, mycuttreecols, mycuttreerows, mean_RA) {
pheatmap(htmp_mat, color = mycolors, cluster_rows = T,
fontsize = 15,
cutree_cols = mycuttreecols, cutree_rows = mycuttreerows,
annotation_row = mean_RA,
border_color = "grey30",
cellwidth = 15, cellheight = 15)
}
mycolors <- colorRampPalette(c("grey95","lightsteelblue4","darkred","darkorange2"))(n = 119)
mycutree_col <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreecols <- max(mycutree_col)
mycutree_row <- cutree(hclust(vegan::vegdist(htmp_mat)), h = 0.8)
mycuttreerows<- max(mycutree_row)
mean_RA <- myrelabund
cairo_pdf(paste("HEATMAP_METABOLOME_VINIFICATIONSnew.pdf", sep = ""), width = 35, height = 15)
htmp_plot(htmp_mat = htmp_mat,
mycolors = mycolors,
mycuttreecols = mycuttreecols,
mycuttreerows = mycuttreerows,
mean_RA = mean_RA)
dev.off()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("S4Vectors")
countData <- read.table (file = "Gene_functions_scalecounts.txt", header = TRUE, row.names = 1, sep = "\t")
countData <- read.table (file = "Gene_functions_scalecounts.txt", header = TRUE, row.names = 1, sep = "\t")
countData <- read.table (file = "Gene_functions_scalecounts.txt", header = TRUE, row.names = 1, sep = "\t")
head(countData)
View(countData)
library(S4Vectors)
metadata
showMethods("metadata")
countDataa <- t(countData)
View(countDataa)
View(countDataa)
metaData <- read.table (file = "Gene_functions_metadata.txt", header = TRUE, row.names = 1, sep = "\t")
dds <- DESeqDataSetFromMatrix(countDataa = countDataa, colData = metaData, design~VINIFICATION_TYPE, tidy = TRUE)
library(DESeq2)
install.packages(c("AlgDesign", "cli", "cplm", "dplyr", "FNN", "gtools", "igraph", "mclust", "nloptr", "openssl", "pcaPP", "ps", "quantreg", "RcppArmadillo", "reticulate", "roxygen2", "RSpectra", "RSQLite", "Seurat", "SeuratObject", "spatstat.core", "spatstat.utils", "testthat", "tibble", "xfun"))
source("~/METATTRANSCRIPTOME trial heatmap.R")
source("~/METATTRANSCRIPTOME trial heatmap.R")
install.packages("gplots")
library(agricolae)
pwd
pwd()
getwd()
setwd("C:/Users/elena/Desktop/GitHub/Grapevine_epiphytic_microbiome-")
mkwd()
